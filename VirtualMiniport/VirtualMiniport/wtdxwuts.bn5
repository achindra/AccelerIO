/*++

Module Name:

    VirtualMiniportScheduler.C

Date:

    28-Feb-2014

Abstract:

    Module implements SRB scheduling.
    All routines start with VM - for 'V'irtual 'M'iniport

    Idea:

    SRB scheduler as of now is in its infancy stage. All that we want to do now is
    schedule an SRB to passive level. Will make use of a single thread to process
    the requests. Scheduler is attached to the adapter and adater start and stop will
    control the scheduler state machine.

        |<-------------------------------------------------------------
        |<---------------------------|           |---------------->|  |
    UnInitialized->Initializing->Initialized->Started->Stopping->Stopped
         |    ^         |             |                   ^         ^
         |    |---------|             |                   |         |
         |              |             |-------------------|---------|
         |              |---------------------------------|---------|
         |                                                          ^
         |----------------------------------------------------------|

    State Transition Rules:
    *   Transition to Stopped is possible when ActiveThreadCount is 0

    However as this scheduler matures I expect to evolve this scheduler with below
    attributes:

    *   Lun's have associated priority
    *   SCSI requests 
    *   SRB requests are queued to priority based scheduler database 
        (similar to thread scheduler).
    *   SRB processor threads will scan the priority based queue and
        process the SRBs
    
    NOTES: 

    *   Scheduler synchronization happens at DISPATCH_LEVEL
    *   This module has no knowledge of SCSI requests. It accesses only
        scheduler database and SRB extension blocks. SRB extension blocks
        are used as if they are work items.

--*/

//
// Headers
//

#include <VirtualMiniportScheduler.h>

//
// WPP based event trace
//

#include <VirtualMiniportScheduler.tmh>

//
// Forward declarations of private functions
//

KSTART_ROUTINE VMSchedulerThread;

//
// Module specific globals
//

LARGE_INTEGER TimeoutFiveSeconds = (-1 * (5 * 10000000));

//
// Define the attributes of functions; declarations are in module
// specific header
//

#pragma alloc_text(NONPAGED, VMSchedulerInitialize)
#pragma alloc_text(NONPAGED, VMSchedulerUnInitialize)
#pragma alloc_text(NONPAGED, VMSchedulerChangeState)
#pragma alloc_text(NONPAGED, VMSchedulerQueryState)
#pragma alloc_text(NONPAGED, VMSchedulerInitializeWorkItem)
#pragma alloc_text(NONPAGED, VMSchedulerUnInitializeWorkItem)
#pragma alloc_text(NONPAGED, VMScheduleWorkItem)

#pragma alloc_text(NONPAGED, VMSchedulerThread)

//
// Driver specific routines
//

NTSTATUS
VMSchedulerInitialize (
    _Inout_ PVIRTUAL_MINIPORT_ADAPTER_EXTENSION AdapterExtension,
    _Inout_ PVIRTUAL_MINIPORT_SCHEDULER_DATABASE SchedulerDatabase
    )

/*++

Routine Description:

    Initializes the scheduler instance of the adapter

Arguments:

    AdapterExtension - Adapter instance that owns this scheduler

    SchedulerDatabase - Scheduler instance to be initialized

Environment:

    IRQL - PASSIVE_LEVEL

Return Value:

    STATUS_SUCCESS
    STATUS_INVALID_PARAMETER
    Any other NTSTATUS code from callee

--*/

{
    NTSTATUS Status, Status1;
    ULONG Index;
    OBJECT_ATTRIBUTES ThreadAttributes;

    if ( AdapterExtension == NULL || SchedulerDatabase == NULL ) {
        Status = STATUS_INVALID_PARAMETER;
        goto Cleanup;
    }

    SchedulerDatabase->SchedulerState = VMStateUninitialized;

    RtlZeroMemory ( SchedulerDatabase, sizeof(VIRTUAL_MINIPORT_SCHEDULER_DATABASE) );
    Status = VMLockInitialize ( &(SchedulerDatabase->SchedulerLock), LockTypeSpinlock );
    if ( !NT_SUCCESS ( Status ) ) {
        VmTrace ( TRACE_LEVEL_ERROR,
                  VM_TRACE_SCHEDULER,
                  "[%s]:VMLockInitialize failed, Status:%!STATUS!",
                  __FUNCTION__,
                  Status );
        goto Cleanup;
    }

    SchedulerDatabase->Adapter = AdapterExtension;
 
    SchedulerDatabase->ActiveThreadCount = 0;

    InitializeListHead ( &(SchedulerDatabase->WorkItems) );
    SchedulerDatabase->WorkItemCount = 0;

    KeInitializeEvent ( &(SchedulerDatabase->WorkQueuedEvent),
                        NotificationEvent,
                        FALSE );
    KeInitializeEvent ( &(SchedulerDatabase->ShutdownEvent),
                        NotificationEvent,
                        FALSE );

    //
    // Now initialize the scheduler thread
    //

    InitializeObjectAttributes ( &ThreadAttributes,
                                 NULL,
                                 OBJ_KERNEL_HANDLE,
                                 NULL,
                                 NULL );

    for ( Index = 0; Index < VIRTUAL_MINIPORT_SCHEDULER_MAX_THREAD; Index++ ) {

        SchedulerDatabase->SchedulerThread [Index].ControlItemInUse = FALSE;
        VMSchedulerInitializeWorkItem(&(SchedulerDatabase->SchedulerThread [Index].ControlItem),
            VMSchedulerHintStop);

        Status = PsCreateSystemThread ( &SchedulerDatabase->SchedulerThread [Index].Thread,
                                        GENERIC_ALL,
                                        &ThreadAttributes,
                                        NULL,
                                        NULL,
                                        VMSchedulerThread,
                                        SchedulerDatabase
                                        );
        if ( !NT_STATUS ( Status ) ) {
            VMTrace ( TRACE_LEVEL_ERROR,
                      VM_TRACE_SCHEDULER,
                      "[%s]:AdapterExtension:%p, PsCreateSystemThread failed with Status:%!STATUS!",
                      AdapterExtension,
                      __FUNCTION__,
                      Status
                      );
            VMRtlDebugBreak();
            goto Cleanup;
        }

        //
        // From this point onwards we are not alone
        //

        if ( VMLockAcquireExclusive(&(SchedulerDatabase->SchedulerLock)) == TRUE ) {
            SchedulerDatabase->SchedulerThread [Index].IsValid = TRUE;
            SchedulerDatabase->ActiveThreadCount++;
        }
    }

    VMSchedulerChangeState ( SchedulerDatabase,
                             VMStateInitialized );
    Status = STATUS_SUCCESS;


    VMTrace ( TRACE_LEVEL_INFORMATION,
              VM_TRACE_SCHEDULER,
              "[%s]:AdapterExtension:%p, SchedulerDatabase:%p (State: %!VMSTATE!), ActiveThreadCount:%d",
              __FUNCTION__,
              AdapterExtension,
              SchedulerDatabase,
              SchedulerDatabase->SchedulerState,
              SchedulerDatabase->ActiveThreadCount
              );

Cleanup:

    if ( !NT_SUCCESS( Status ) && SchedulerDatabase != NULL) {

        //
        // We can potentially get into infinite loop waiting for scheduler to stop.
        // If everything is ok, this should never happen. CAUTION!!!
        //

        Index = 0;

        do {

            //
            // If we have been waiting for state change for quiet some time, then give a break to debug
            //

            if ( Index % 10 ) {
                VMRtlDebugBreak();
            }

            Status1 = VMSchedulerChangeState(SchedulerDatabase,
                VMStateStopped);
            if ( Status1 != STATUS_SUCCESS ) {
                VMTrace(TRACE_LEVEL_WARNING,
                        VM_TRACE_SCHEDULER,
                        "[%s]:AdapterExtension:%p, ScheduleDatabase:%p, Waiting for desired state:%!VMSTATE!, Status:%!STATUS!",
                        __FUNCTION__,
                        AdapterExtension,
                        SchedulerDatabase,
                        VMStateStopped,
                        Status1
                        );
                VMRtlDelayExecution(&TimeoutFiveSeconds);
            } else {
                VMTrace(TRACE_LEVEL_WARNING,
                        VM_TRACE_SCHEDULER,
                        "[%s]:AdapterExtension:%p, ScheduleDatabase:%p, Scheduler state changed to %!VMSTATE! after %d attempts",
                        __FUNCTION__,
                        AdapterExtension,
                        SchedulerDatabase,
                        VMStateStopped,
                        Index
                        );
                break;
            }

            Index++;

        } while ( Status1 != STATUS_SUCCESS );
    }

    return(Status);
}


NTSTATUS
VMSchedulerChangeState(
    _Inout_ PVIRTUAL_MINIPORT_SCHEDULER_DATABASE SchedulerDatabase,
    _In_ VM_STATE SchedulerNewState,
    _Inout_ PVM_STATE SchedulerOldState,
    _In_ BOOLEAN Block
    ) 

/*++

Routine Description:

    Scheduler state machine

Arguments:

    Scheduler - Scheduler instance

    SchedulerNewState - State to transition to

    SchedulerOldState - Return Old State

    Block - Indicates if we should block until the state change

Environment:

    IRQL - <= DISPATCH_LEVEL

Return Value:

    STATUS_SUCCESS
    STATUS_PENDING
    STATUS_INVALID_PARAMETER
    Any other NTSTATUS

--*/

{
    NTSTATUS Status;
    ULONG Index;

    //
    // Validate the paremeters
    //

    if (SchedulerDatabase == NULL ||
        !(SchedulerNewState >= VMStateUninitialized  && SchedulerNewState <= VMStateStopped) ||
        SchedulerOldState == NULL ) {
        Status = STATUS_INVALID_PARAMETER;
        goto Cleanup;
    }

    if ( VMLockAcquireExclusive(&(SchedulerDatabase->SchedulerLock)) == TRUE ) {

        //
        // Grab the current state
        //
        *SchedulerOldState = SchedulerDatabase->SchedulerState;

        switch ( SchedulerDatabase->SchedulerState ) {
        
        case VMStateUninitialized:
        
            switch ( SchedulerNewState ) {
            case VMStateUninitialized:
            case VMStateInitializing:
            case VMStateStopped:
                SchedulerDatabase->SchedulerState = SchedulerNewState;
                Status = STATUS_SUCCESS;
                break;

            default:
                Status = STATUS_INVALID_PARAMETER;
                break;
            }
            break; // VMStateUninitialized

        case VMStateInitializing:
            switch ( SchedulerNewState ) {
            case VMStateInitializing:
            case VMStateInitialized:
                SchedulerDatabase->SchedulerState = SchedulerNewState;
                Status = STATUS_SUCCESS;
                break;

                
            case VMStateUninitialized:
            case VMStateStopping:
            case VMStateStopped:
                
                //
                // If request is for Stopping state, if situation permits
                // state is updated to stopped. Similarly if request is for
                // Stopped/Uninitialize, if situation does not permit, state
                // is changed stopping
                //

                if ( SchedulerDatabase->ActiveThreadCount == 0 ) {
                    SchedulerDatabase->SchedulerState = (SchedulerNewState == VMStateUninitialized) ?
                                                         VMStateUninitialized : VMStateStopped;
                    Status = STATUS_SUCCESS;
                } else {
                    //
                    // If there are threads around, 
                    //
                    SchedulerDatabase->SchedulerState = VMStateStopping;
                    Status - STATUS_PENDING;
                }
                break;

            default:
                Status = STATUS_INVALID_PARAMETER;
                break;
            } 
            break; // VMStateInitializing

        case VMStateInitialized:
            switch ( SchedulerNewState ) {
            case VMStateStarted:
                SchedulerDatabase->SchedulerState = SchedulerNewState;
                Status = STATUS_SUCCESS;
                break;
                
            case VMStateUninitialized:
            case VMStateStopping:
            case VMStateStopped:

                //
                // If request is for Stopping state, if situation permits
                // state is updated to stopped. Similarly if request is for
                // Stopped/Uninitialize, if situation does not permit, state
                // is changed stopping
                //

                if ( SchedulerDatabase->ActiveThreadCount == 0 ) {
                    SchedulerDatabase->SchedulerState = (SchedulerNewState == VMStateUninitialized) ?
                                                         VMStateUninitialized : VMStateStopped;
                    Status = STATUS_SUCCESS;
                } else {
                    //
                    // If there are threads around, 
                    //
                    SchedulerDatabase->SchedulerState = VMStateStopping;
                    Status - STATUS_PENDING;
                }
                break;

            default:
                Status = STATUS_INVALID_PARAMETER;
                break;

            }
            break; // VMStateInitialized

        case VMStateStarted:
            switch ( SchedulerNewState ) {
            case VMStateStopping:
            case VMStateStopped:
                if ( SchedulerDatabase->ActiveThreadCount == 0 ) {
                    SchedulerDatabase->SchedulerState = VMStateStopped;
                    Status = STATUS_SUCCESS;
                } else {
                    SchedulerDatabase->SchedulerState = VMStateStopping;
                    Status = STATUS_PENDING;
                }
                break;
            default:
                Status = STATUS_INVALID_PARAMETER;
                break;
            } 
            break; // VMStateStarted

        case VMStateStopping:
            switch ( SchedulerNewState ) {
            case VMStateStopped:
                if ( SchedulerDatabase->ActiveThreadCount == 0 ) {
                    SchedulerDatabase->SchedulerState = SchedulerNewState;
                    Status = STATUS_SUCCESS;
                } else {
                    //
                    // We will still be in stopping state.
                    // Basically no state transition
                    //
                    Status = STATUS_PENDING;
                }
                break;

            default:
                Status = STATUS_INVALID_PARAMETER;
                break;
            } 
            break; // VMStateStopping

        case VMStateStopped:
            switch ( SchedulerNewState ) {
            case VMStateUninitialized:
                SchedulerDatabase->SchedulerState = SchedulerNewState;
                Status = STATUS_SUCCESS;
                break;

            default:
                Status = STATUS_INVALID_PARAMETER;
                break;
            } 
            break; // VMStateStopped

        default:
            // Unrecognized current state
            Status = STATUS_INVALID_PARAMETER;
            VMTrace(TRACE_LEVEL_ERROR,
                VM_TRACE_SCHEDULER,
                "[%s]: Invalid scheduler state %!VMSTATE!",
                __FUNCTION__,
                SchedulerDatabase->SchedulerState);
            break; // SchedulerState
        }
    
        //
        // Now that we had been through state transitions, see if there are any state
        // transition actions to be performed, before giving up the lock.
        //

        if ( Status == STATUS_PENDING ) {
            //
            // We end with pending status only when we transition from any other state to
            // Stopping. This requires us to tell the scheduler threads to stop
            //

            //
            // Queue the shutdown work item too. This is not really not needed as we our
            // shutdown event will make sure to wake up the threads and exit. But queing
            // this work item will help us test the work item aborts.
            //
            for ( Index = 0; Index < SchedulerDatabase->ActiveThreadCount; Index++ ) {
                if ( SchedulerDatabase->SchedulerThread [Index].ControlItemInUse == FALSE ) {
                    
                    //
                    // Mark the work item busy, initialize with scheduler hint
                    // and queue the work item.
                    //
                    SchedulerDatabase->SchedulerThread [Index].ControlItemInUse = TRUE;
                    VMSchedulerInitializeWorkItem(&(SchedulerDatabase->SchedulerThread [Index].ControlItem),
                                                  VMSchedulerHintStop);
                    VMScheduleWorkItem(SchedulerDatabase,
                                       &(SchedulerDatabase->SchedulerThread [Index].ControlItem),
                                       TRUE);
                }
            }

            //
            // Signal the shutdown event
            //
            KeSetEvent(&(SchedulerDatabase->ShutdownEvent),
                IO_NO_INCREMENT,
                FALSE);
        }

        VMLockReleaseExclusive(&(SchedulerDatabase->SchedulerLock));
    } // End of current state
      

Cleanup:
    return(Status);
}

BOOLEAN
VMScheduleWorkItem (
    _In_ PVIRTUAL_MINIPORT_SCHEDULER_DATABASE SchedulerDatabase,
    _In_ PVIRTUAL_MINIPORT_SCHEDULER_WORKITEM WorkItem
    )

/*++

Routine Description:

    Schedule an workitem; This functions only schedules a workitem

Arguments:

    Scheduler - Scheduler instance to which the work item should be queued

    WorkItem - Scheduler work item instance that needs to be queue

Environment:

    IRQL - <= DISPATCH_LEVEL

Return Value:

    TRUE
    FALSE

--*/

{
    BOOLEAN Status;

    UNREFERENCED_PARAMETER ( SchedulerDatabase );
    UNREFERENCED_PARAMETER ( WorkItem );

    Status = FALSE;

//Cleanup:

    return(Status);
}